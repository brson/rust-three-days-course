# Beginner Overview
[Table of Contents](toc/english.html)

---

# Background

---

## A Little Bit of History

-   Rust is roughly 10 years old
-   An experimental project by Graydon Hoare
-   Adopted by Mozilla in 2010
-   Looked a bit Go-like back then
-   0.1 in 2012, 1.0 in 2015

Note:

- personal history
  - TODO outline this

---

## Development

- Always together with a larger project (e.g. Servo)
- Early adoption of regular releases
- RFC driven development
- Follow good software engineering practice

"Things are not complete when there is nothing left to add, but when there is nothing left to take away."

---

## Release Method

- Nightly releases
- Every 6 weeks, the current nightly is promoted to beta
- After 6 weeks of testing, beta becomes stable
- Strong compatability Guarantees
- Small iterations over large changes

---

## Philosophy

- Predictable runtime behaviour
- No garbage collection
- Good support for "programming in the large"
- Practical
- Easy to integrate
- Approachable

---

## Philosophy

- Composition over inheritance
- Express **capabilities**, not hierarchies
- Strongly typed, no duck/weak typing
- Robust package management
- Semantic versioning

---

## The Three Words

- Safe
- Concurrent
- Fast

---

## Safe

Memory-safe means:

- No illegal memory access
- Deallocation is automated

**Warning:** memory leaks are *safe* by that definition!

---

## Concurrent

"Concurrency without fear"
- Detects concurrent access to data and requires synchronisation
- Detects when unsynchronised access is safely possible!
- Protects from data races!

---

## Fast

- Many properties are guaranteed at compile time and have no runtime cost!
- Optimizing compiler based on LLVM
- Features with runtime cost are explicit
- Static dispatch by default

---

## Practical

- Opt-in unsafe memory access
- Great FFI support
- Understandable error messages by the compiler
- Comprehensive documentation you can trust

---

## Lean

- "Pay what you use" features
- Focus on Zero-cost abstractions

---

# Syntax

---

## TODO

- slides for relevant beginner pingcap topics
  - generics
  - adts & match
  - gc


---

Rust has a syntax designed to _look_ familiar to C and C++ programmers, the
traditional systems programming languages.

---

## Basics

<pre><code data-source="chapters/shared/code/pingcap-beginner/1.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Tuples

<pre><code data-source="chapters/shared/code/pingcap-beginner/2.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Structures

<pre><code data-source="chapters/shared/code/pingcap-beginner/3.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Enums

<pre><code data-source="chapters/shared/code/pingcap-beginner/4.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Null

We don't have it.

There is a more sophisticated `Option` available to you.

It's better. Promise.

---

## `if`

<pre><code data-source="chapters/shared/code/pingcap-beginner/5.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `if let`

<pre><code data-source="chapters/shared/code/pingcap-beginner/6.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `match`

<pre><code data-source="chapters/shared/code/pingcap-beginner/7.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `loop` and `while`

<pre><code data-source="chapters/shared/code/pingcap-beginner/8.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `for` and `while let`

<pre><code data-source="chapters/shared/code/pingcap-beginner/9.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `impl` and `trait`

<pre><code data-source="chapters/shared/code/pingcap-beginner/10.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Scopes

Rust is block scoped. Blocks can return values.

<pre><code data-source="chapters/shared/code/pingcap-beginner/11.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Closures

<pre><code data-source="chapters/shared/code/pingcap-beginner/12.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Borrowing

Or *references*.

<pre><code data-source="chapters/shared/code/pingcap-beginner/13.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Generics

<pre><code data-source="chapters/shared/code/pingcap-beginner/14.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

Generally the `where` syntax is preferred.

---

## `use` and `mod`

<pre><code data-source="chapters/shared/code/pingcap-beginner/15.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Attributes

Rust attributes are used for a number of different things. There is a full list of attributes in the [reference](https://doc.rust-lang.org/reference/attributes.html).

<pre><code data-source="chapters/shared/code/pingcap-beginner/16.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Mutability

---

Rust uses opt-in mutability.

If something is mutable, you must tell it.

---

## An Example

<pre><code data-source="chapters/shared/code/pingcap-beginner/17.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

This cannot work. It is not mutable.

---

## Correct

<pre><code data-source="chapters/shared/code/pingcap-beginner/18.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

In Rust data mutability must be declared.

Mutability is always apparent from reading the code.

---

## Basic Types

---

## Booleans

Boringly familiar.

<pre><code data-source="chapters/shared/code/pingcap-beginner/19.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Integers

Rust comes with all standard int types, with and without sign

- i8, u8
- i16, u16
- i32 **(default)**, u32
- i64, u64
- i128, u128
- isize, usize

`isize` and `usize` are architecture dependent.

---

## Casts

**Can** lose information:

<pre><code data-source="chapters/shared/code/pingcap-beginner/20.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Casts

**Cannot** lose information:

<pre><code data-source="chapters/shared/code/pingcap-beginner/21.rs" data-trim="hljs rust" class="lang-rust"></code></pre>


---

## Floats

Rust also comes with floats of all standard sizes: f32, f64

<pre><code data-source="chapters/shared/code/pingcap-beginner/22.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

There is no default float.


---

## Basic Generics

---

Generics are everywhere. You will use them frequently.

---

## Generic Functions

<pre><code data-source="chapters/shared/code/pingcap-beginner/23.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## With Bounds

Generic functions can also have bounds.

These are equivalent:

<pre><code data-source="chapters/shared/code/pingcap-beginner/24.rs" data-trim="hljs rust"></code></pre>

`where` is preferred for complex generics.

---

## Generic Structs

<pre><code data-source="chapters/shared/code/pingcap-beginner/25.rs" data-trim="hljs rust"></code></pre>

---

## Type Inference

Rust finds the types of all variables and generics if it has sufficient information.

This only applies *inside* of function limits.

Function Signatures must be complete.

---

## Generic Enums

<pre><code data-source="chapters/shared/code/pingcap-beginner/26.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Important Rust Types

---

## Vectors ("arrays")

<pre><code data-source="chapters/shared/code/pingcap-beginner/27.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Hash Maps

<pre><code data-source="chapters/shared/code/pingcap-beginner/28.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Result

<pre><code data-source="chapters/shared/code/pingcap-beginner/29.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `Ok(go_write_rust)`

Thank you!
