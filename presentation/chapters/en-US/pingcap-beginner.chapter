<!--# Beginner Overview
[Table of Contents](toc/english.html)
-->

<!--

TODOs

- demo of gc vs raft
  - ripgrep vs fuzzyfind (fzf)
- TODO: talk about power of cargo
- make sure we cover _all_ the differentiators
- strong typing vs weak typing vs dynamic typing
- add overview subject of oo vs capabilities, composition

-->

## Rust / PingCAP 1

<br>

__Beginner slides__ - https://tinyurl.com/ya77jwbb

Advanced slides - https://tinyurl.com/yar832fw

Note:

- thanks
- speak slowly and simply
  - speak up
  - need help translating
- disorganized
- audience - non-programmers, go-programmers, rust-programmers
- two segments - beginner and advaced
- examples are runnable in play.rust-lang.org

---

# Introductions

---

# Background

Note:

- this is about history and philosophy
- personal perspective and history

---

## Why Rust?

- _Very high performance_ - **without crashes**
- Predictable runtime behaviour
- No garbage collection, no runtime
- Good support for "programming in the large"
- Easy to integrate (interoperability)
- Portability - https://tinyurl.com/zvmzllq

Note:

- perf vs C/C++
- highly reliable
- Rust's main competitors are C and C++
- programming in the large - cargo
- ~80 known platforms

---

## A Little Bit of History

-   Rust is roughly 12 years old
-   An experimental project by Graydon Hoare, 2006
-   Adopted by Mozilla in 2010
-   0.1 in 2012, 1.0 in 2015
-   Early language _very_ different from today
-   Changes in the community

Note:

- say a little about graydon
- why was it created?
- how is it being used today?
  - firefox, facebook, google, dropbox
- how was it like go?
- show the evolution of rust later

---

## Philosophy

- Practicality
- Memory-safety
- Community first
- Later: predictable runtime behavior
- Later: interoperability
- Later: portability

Note:

- rust's philosophy changed over time
- practicality?
- talk about community strategy

---

## Development

- Co-developed with its use case (Servo)
- Rapid evolution, integration and releases
- Community-oriented RFC process
- Extraordinary community engagement
- Best open source development / government practices

"Things are not complete when there is nothing left to add, but when there is nothing left to take away."

Note:

- what is servo?
- co-evolution
- talk about community evolution

---

## Release Method

- Nightly releases
- Every 6 weeks, the current nightly is promoted to beta
- After 6 weeks of testing, beta becomes stable
- Strong compatability guarantees
- Small iterations over large changes

Note:

- rust first rapid-release language?
- backwards-compat really?

---

## Philosophy

- Composition over inheritance
- Express **capabilities**, not hierarchies
- Strongly typed, no duck/weak typing
- Robust package management
- Semantic versioning

---

## The Three Words

A systems programming language

Pursuing the trifecta:

**Safe, Concurrent, Fast**

Note:

- say a little about this

---

## Safe

Memory-safe means:

- No illegal memory access
- Thus no crashes (segmentation faults)
- Deallocation is automated

**Warning:** memory leaks are *safe* by that definition!

Note:

- use after free, out of bounds reads and writes

---

## Concurrent

"Fearless concurrency"

- Concurrent write access to data requires synchronisation
- Concurrent read access to data is generally allowed
- Protection from data races
- __Statically guaranteed__

Note:

- memory safety
- can other languages do this?
- how? in a minute

---

## Fast

- Many properties are guaranteed at compile time and have no runtime cost!
- Optimizing compiler based on LLVM
- Features with runtime cost are explicit
- Static dispatch by default
- "Pay for what you use"
- Zero-cost abstractions

Note:

- tradeoffs of static dispatch
  - icache
  - vs C

---

## Practical

- Opt-in unsafe memory access
- Great FFI support
- Understandable error messages by the compiler
- Comprehensive documentation you can (mostly) trust

---

## The Magic

- The problem: aliasing and mutability
- The solution: ownership and borrowing

Note:

- can't describe in detail

---

## Rust's Influences

- ML
- Haskell
- C++
- Scala
- Ruby
- Go?
- Python

Note:

- ask graydon
- Scala - what _not_ to do
- ML - functional / ADTs
- Haskell / Scala - typeclasses
- C++ - syntax, compile / runtime model, governance
- Ruby - iterators
  - cargo: bundler -> cargo -> yarn
  - personalities
- Go - parallel evolution, governance
- Python - community, RFC

---

## Rust's Influence

- Proven practicality of "linear" type systems (ownership)
- Proven practicality of "region" analysis (borrowwing)
- C++, Swift, Elm
- Code of conduct
- RFC process
- This Week in Rust
- Compiler error messages

Note:

- my opinion
- cyclone
- RFC and swift
- swift and C++
- elm - Result
- others?

---

# Syntax

<!--

## TODO

- slides for relevant beginner pingcap topics
  - generics
  - adts & match
  - gc

-->

---

Rust has a syntax designed to _look_ familiar to C and C++ programmers, the
traditional systems programming languages.

---

## Basics

<pre><code data-source="chapters/shared/code/pingcap-beginner/1.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Tuples

<pre><code data-source="chapters/shared/code/pingcap-beginner/2.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Structures

<pre><code data-source="chapters/shared/code/pingcap-beginner/3.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Enums

<pre><code data-source="chapters/shared/code/pingcap-beginner/4.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Null

We don't have it.

There is a more sophisticated `Option` available to you.

It's better. Promise.

---

## `if`

<pre><code data-source="chapters/shared/code/pingcap-beginner/5.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `if let`

<pre><code data-source="chapters/shared/code/pingcap-beginner/6.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `match`

<pre><code data-source="chapters/shared/code/pingcap-beginner/7.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `loop` and `while`

<pre><code data-source="chapters/shared/code/pingcap-beginner/8.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `for` and `while let`

<pre><code data-source="chapters/shared/code/pingcap-beginner/9.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `impl` and `trait`

<pre><code data-source="chapters/shared/code/pingcap-beginner/10.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Scopes

Rust is block scoped. Blocks can return values.

<pre><code data-source="chapters/shared/code/pingcap-beginner/11.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Closures

<pre><code data-source="chapters/shared/code/pingcap-beginner/12.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Borrowing

Or *references*.

<pre><code data-source="chapters/shared/code/pingcap-beginner/13.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Generics

<pre><code data-source="chapters/shared/code/pingcap-beginner/14.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

Generally the `where` syntax is preferred.

---

## `use` and `mod`

<pre><code data-source="chapters/shared/code/pingcap-beginner/15.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Attributes

Rust attributes are used for a number of different things. There is a full list of attributes in the [reference](https://doc.rust-lang.org/reference/attributes.html).

<pre><code data-source="chapters/shared/code/pingcap-beginner/16.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

# Mutability

---

Rust uses opt-in mutability.

If something is mutable, you must tell it.

---

## An Example

<pre><code data-source="chapters/shared/code/pingcap-beginner/17.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

This cannot work. It is not mutable.

---

## Correct

<pre><code data-source="chapters/shared/code/pingcap-beginner/18.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

In Rust data mutability must be declared.

Mutability is always apparent from reading the code.

---

## Basic Types

---

## Booleans

Boringly familiar.

<pre><code data-source="chapters/shared/code/pingcap-beginner/19.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Integers

Rust comes with all standard int types, with and without sign

- i8, u8
- i16, u16
- i32 **(default)**, u32
- i64, u64
- i128, u128
- isize, usize

`isize` and `usize` are architecture dependent.

---

## Casts

**Can** lose information:

<pre><code data-source="chapters/shared/code/pingcap-beginner/20.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Casts

**Cannot** lose information:

<pre><code data-source="chapters/shared/code/pingcap-beginner/21.rs" data-trim="hljs rust" class="lang-rust"></code></pre>


---

## Floats

Rust also comes with floats of all standard sizes: f32, f64

<pre><code data-source="chapters/shared/code/pingcap-beginner/22.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

There is no default float.


---

# Basic Generics

---

Generics are everywhere. You will use them frequently.

---

## Generic Functions

<pre><code data-source="chapters/shared/code/pingcap-beginner/23.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## With Bounds

Generic functions can also have bounds.

These are equivalent:

<pre><code data-source="chapters/shared/code/pingcap-beginner/24.rs" data-trim="hljs rust"></code></pre>

`where` is preferred for complex generics.

---

## Generic Structs

<pre><code data-source="chapters/shared/code/pingcap-beginner/25.rs" data-trim="hljs rust"></code></pre>

---

## Type Inference

Rust finds the types of all variables and generics if it has sufficient information.

This only applies *inside* of function limits.

Function Signatures must be complete.

---

## Generic Enums

<pre><code data-source="chapters/shared/code/pingcap-beginner/26.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

# Important Rust Types

---

## Vectors ("arrays")

<pre><code data-source="chapters/shared/code/pingcap-beginner/27.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Hash Maps

<pre><code data-source="chapters/shared/code/pingcap-beginner/28.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## Result

<pre><code data-source="chapters/shared/code/pingcap-beginner/29.rs" data-trim="hljs rust" class="lang-rust"></code></pre>

---

## `Ok(go_write_rust)`

Thank you!
