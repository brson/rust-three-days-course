<!--# Advanced Rust

[Table of Contents](toc/english.html)

-->

<!--

todo

https://github.com/rust-lang/rust/tree/b5f5a2715ed8685bc19fd589a23c7c658c2fe6bd

- display shortened links

-->

## Rust / PingCAP 2

<br>

Beginner slides - https://tinyurl.com/ya77jwbb

__Advanced slides__ - https://tinyurl.com/yar832fw

Note:

- for people who know rust
- topics related to tikv
- speak up
- we don’t know everything
- examples on play.rust-lang.org

---

## Planned Topics

- Rust 2018
- Overflow
- RefCell?
- Error handling
- Tour of historic Rust?

---

## Potential *Other* Topics

refcell, lifetimes, entry, sized, sync/send, specialization,
heigher ranked trait bounds, rules of unsafe code,
trait bounds, impl trait, assoc types, advanced iterators
pinning / async / await, macros, unit types

---

## Rust 2018 Edition

Rust 2018 Guide - https://doc.rust-lang.org/stable/edition-guide/

- What is the purpose of editions?

Note:

- Break compat, while maintaining compat
- Establish modern idioms
- Marketing
- "Official" purpose of Rust 2018 in guide
- Unique upgrade scheme

---

## What is Actually New?

- "path clarity" / "uniform paths"
- Non-linear lifetimes

... and a number if minor things.

https://tinyurl.com/ydz4rjgx

Note:

- uniform paths in tikv upgrade / rustfix

---

## Uniform Paths

Examples - https://tinyurl.com/yd333cm9

Guide is somewhat incorrect about paths in 2018 (edition-guide#139)

---

## Overflow 1

```
fn main() {
    let a = 255u8;
    let a = a + 1;
	black_box(a);
}
```

---

## Non-linear lifetimes

---

## Overflow 2

    thread 'main' panicked at 'attempt to add with overflow', ../src/bin/overflow.rs:3:13
    note: Run with `RUST_BACKTRACE=1` for a backtrace.

Why does rust treat overflow like this?

---

## Overflow 3

```
fn main() {
    let a = 255u8;
    let a = a.wrapping_add(1);
	black_box(a);
}
```

Other options - https://tinyurl.com/y8wgeg56

---

## Error Handling

- Crucial early decision
- Surprisingly complex and flexible
- But powerful, reliable, and ergonomic  
  (when used appropriately)

The Book - Error Handling - https://tinyurl.com/y92hczmh

The Failure Book - https://tinyurl.com/y8xnoqmq

Note:

- opinions ahead
- Rust error handling is great -ish
- think about early
- many evolving patterns
- `unwrap` as “code smell”
- The Book is a *starting point*
  - need practical patterns

---

## Error Handling Patterns

- Return `failure::Error` everywhere
- Per-crate (or subsystem) enums / structs
  - `failure`
  - `quick_error!`
- Preserving and adding to the “cause” chain
- Strings as errors?

Note:

- patterns / antipatterns / examples
- goals: boilerplate
  - maintainability
  - usability
- backtraces

---

## Traits `Fail` vs `StdError`

- Easy "cause" chaining
- Backtrace capture
- `Display + Send + Sync + 'static`
- all compatible `StdError` implement `Fail`
- `Fail` _does not_ implement `StdError`

`Fail` - https://tinyurl.com/ybyrhynh

`StdError` - https://tinyurl.com/yau24b44

Note:

- Fail intended as replacement for StdError
- Compatibility methods to convert to/from StdError

---

## `failure::Error` Everywhere

```rust
use failure::{Error, err_msg};

fn main() -> Result<(), Error> {
    foo()?;
    // ...
    Ok(())
}

fn foo() -> Result<(), Error> {
    Err(err_msg("bad!"))
}
```

`failure::Error` - https://tinyurl.com/ybjuuuer

Note:

- `Error` generic error type
- failure docs don't give much guidance

---

## `failure::Error` Everywhere

```
#[macro_use]
extern crate failure_derive;
use failure::{Error, err_msg};
use std::fmt;

fn main() -> Result<(), Error> {
    foo()?;
    // ...
    Ok(())
}

#[derive(Fail, Debug)]
struct Bad;
impl fmt::Display for Bad { ... }

fn foo() -> Result<(), Error> { Err(Bad) }
```

---

## `failure::Error` Everywhere

```
use failure::Error;
use std::io;

fn main() -> Result<(), Error> {
    foo()?;
    // ...
    Ok(())
}

fn foo() -> Result<(), Error> {
    Err(io::Error::from(io::ErrorKind::NotFound))?;
    Ok(())
}
```

---

## Per-crate Enums

`Error` + `ErrorKind` - https://tinyurl.com/y923nsr5

---

## "Cause" Chaining

```
pub trait Error: Debug + Display {
    fn cause(&self) -> Option<&dyn Error> {
        self.source()
    }

    ...
}
```

---

## "Cause" Chaining

```
use failure::{Error, ResultExt};

fn main() -> Result<(), Error> {
    run_foo().context("foo failed")?;
    Ok(())
}

fn run_foo() -> Result<(), Error> {
   bail!("something bad happened");
   Ok(())
}
```

---

## Error Handling Anti-Patterns

- `panic::catch_unwind`
- Hand-rolled `Error/Fail` types
- `error_chain!`
- throwing away errors / not chaining "causes"
- `fn main() -> Result<...>`
- When is it ok to `unwrap`?
- Strings as errors

Note:

- main -> Result is for toy code
- `failure` propagates errors

---

## Default Error Reporting

```rust
#[macro_use] extern crate failure;

use failure::{Error, ResultExt};

fn main() -> Result<(), Error> {
    run_foo().context("foo failed")?;
    Ok(())
}

fn run_foo() -> Result<(), Error> {
    run_bar().context("bar failed")?;
    Ok(())
}

fn run_bar() -> Result<(), Error> {
    bail!("something really bad happened")
}
```

Note:

- failure crate not on play.rust-lang.org
  - show results on slides
- likewise for panics
    - *this* is an appropriate place to catch panics

---

## Default Error Reporting

```
$ cargo run --bin main-result
   Compiling advanced-experiments v0.1.0 (/home/brian/advanced-experiments)
    Finished dev [unoptimized + debuginfo] target(s) in 0.90s
     Running `target/debug/main-result`
Error: ErrorMessage { msg: "something really bad happened" }

bar failed

foo failed
```

Why?

---

## Termination

API docs - https://tinyurl.com/ydhdjxfk

```
impl<E: Debug> Termination for Result<(), E> { ... }
```

---

## Custom Error Reporting

```rust
#[macro_use] extern crate failure;

use failure::{Error, ResultExt};
use std::process;

fn main() {
    if let Err(e) = run() {
        println!("program failed: {}", e);
        let num_causes = e.iter_causes().count();
        for (i, cause) in e.iter_causes().enumerate() {
            if num_causes != i + 1 {
                println!("  caused by: {}", cause);
            } else {
                println!("  root cause: {}", cause);
            }
        }
        process::exit(1);
    }
}

fn run() -> Result<(), Error> {
    run_foo().context("foo failed")?;
    Ok(())
}

fn run_foo() -> Result<(), Error> {
    run_bar().context("bar failed")?;
    Ok(())
}

fn run_bar() -> Result<(), Error> {
    bail!("something really bad happened")
}
```

---

## Custom Error Reporting

```
$ cargo run --bin main-result-better
   Compiling advanced-experiments v0.1.0 (/home/brian/advanced-experiments)
    Finished dev [unoptimized + debuginfo] target(s) in 1.01s
     Running `target/debug/main-result-better`
program failed: foo failed
  caused by: bar failed
  root cause: something really bad happened
```

---

## How Does ‘?’ Work?

```rust
// Desugared `<expr>?`
match Try::into_result(<expr>) {
    Ok(val) => #[allow(unreachable_code)] val,
    Err(err) => #[allow(unreachable_code)]
        if enclosing_catch {
            break 'catch_target Try::from_error(From::from(err)),
        } else {
            return Try::from_error(From::from(err)),
        }
}
```

[`Try trait`](https://doc.rust-lang.org/stable/src/core/ops/try.rs.html#17)

[`Try desugaring in rustc`](https://github.com/rust-lang/rust/blob/b5f5a2715ed8685bc19fd589a23c7c658c2fe6bd/src/librustc/hir/lowering.rs#L4420)

[RFC 1859 - Try Trait](https://github.com/rust-lang/rfcs/blob/master/text/1859-try-trait.md)

Note:

- `?` works for `Option`

---

## What if `?` Doesn’t Work?

---

## Historic Rust

http://brson.github.io/archaea/

- http://brson.github.io/archaea/rec.html
- http://brson.github.io/archaea/vec.html
- http://brson.github.io/archaea/linear-for-loop.html
- http://brson.github.io/archaea/spawn-fn.html
- http://brson.github.io/archaea/tag.html

<!--

- rust 2018
- overflow
- refcell
- lifetimes
- entry
- sized
- sync/send - ask wenchen / breesewish
  - arc auto-sync/send
- error handling

- specialization
- heigher ranked trait bounds
- rules of unsafe code!
- trait bounds
- impl trait
- assoc types

- advanced iterators
- pinning / async / await
- macros
- unit types

-->